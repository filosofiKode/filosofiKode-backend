"""Courses"""
type Course {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
  cover: UploadFile
  slug: String
  instructors(sort: String, limit: Int, start: Int, where: JSON): [Instructor]
  lessons(sort: String, limit: Int, start: Int, where: JSON): [Lesson]
}

type CourseAggregator {
  count: Int
}

type CourseConnection {
  values: [Course]
  groupBy: CourseGroupBy
  aggregate: CourseAggregator
}

type CourseConnection_id {
  key: ID
  connection: CourseConnection
}

type CourseConnectionCover {
  key: ID
  connection: CourseConnection
}

type CourseConnectionCreatedAt {
  key: DateTime
  connection: CourseConnection
}

type CourseConnectionDescription {
  key: String
  connection: CourseConnection
}

type CourseConnectionSlug {
  key: String
  connection: CourseConnection
}

type CourseConnectionTitle {
  key: String
  connection: CourseConnection
}

type CourseConnectionUpdatedAt {
  key: DateTime
  connection: CourseConnection
}

type CourseGroupBy {
  _id: [CourseConnection_id]
  createdAt: [CourseConnectionCreatedAt]
  updatedAt: [CourseConnectionUpdatedAt]
  title: [CourseConnectionTitle]
  description: [CourseConnectionDescription]
  cover: [CourseConnectionCover]
  slug: [CourseConnectionSlug]
}

input CourseInput {
  title: String!
  description: String!
  cover: ID
  instructors: [ID]
  lessons: [ID]
  slug: String
}

input createCourseInput {
  data: CourseInput
}

type createCoursePayload {
  course: Course
}

input createInstructorInput {
  data: InstructorInput
}

type createInstructorPayload {
  instructor: Instructor
}

input createLessonInput {
  data: LessonInput
}

type createLessonPayload {
  lesson: Lesson
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteCourseInput {
  where: InputID
}

type deleteCoursePayload {
  course: Course
}

input deleteInstructorInput {
  where: InputID
}

type deleteInstructorPayload {
  instructor: Instructor
}

input deleteLessonInput {
  where: InputID
}

type deleteLessonPayload {
  lesson: Lesson
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""Instructors"""
type Instructor {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  bio: String
  email: String!
  website: String
  courses(sort: String, limit: Int, start: Int, where: JSON): [Course]
}

type InstructorAggregator {
  count: Int
}

type InstructorConnection {
  values: [Instructor]
  groupBy: InstructorGroupBy
  aggregate: InstructorAggregator
}

type InstructorConnection_id {
  key: ID
  connection: InstructorConnection
}

type InstructorConnectionBio {
  key: String
  connection: InstructorConnection
}

type InstructorConnectionCreatedAt {
  key: DateTime
  connection: InstructorConnection
}

type InstructorConnectionEmail {
  key: String
  connection: InstructorConnection
}

type InstructorConnectionName {
  key: String
  connection: InstructorConnection
}

type InstructorConnectionUpdatedAt {
  key: DateTime
  connection: InstructorConnection
}

type InstructorConnectionWebsite {
  key: String
  connection: InstructorConnection
}

type InstructorGroupBy {
  _id: [InstructorConnection_id]
  createdAt: [InstructorConnectionCreatedAt]
  updatedAt: [InstructorConnectionUpdatedAt]
  name: [InstructorConnectionName]
  bio: [InstructorConnectionBio]
  email: [InstructorConnectionEmail]
  website: [InstructorConnectionWebsite]
}

input InstructorInput {
  name: String!
  bio: String
  email: String!
  website: String
  courses: [ID]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Lessons"""
type Lesson {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  slug: String!
  description: String!
  videoUrl: String
  course: Course
}

type LessonAggregator {
  count: Int
}

type LessonConnection {
  values: [Lesson]
  groupBy: LessonGroupBy
  aggregate: LessonAggregator
}

type LessonConnection_id {
  key: ID
  connection: LessonConnection
}

type LessonConnectionCourse {
  key: ID
  connection: LessonConnection
}

type LessonConnectionCreatedAt {
  key: DateTime
  connection: LessonConnection
}

type LessonConnectionDescription {
  key: String
  connection: LessonConnection
}

type LessonConnectionSlug {
  key: String
  connection: LessonConnection
}

type LessonConnectionTitle {
  key: String
  connection: LessonConnection
}

type LessonConnectionUpdatedAt {
  key: DateTime
  connection: LessonConnection
}

type LessonConnectionVideoUrl {
  key: String
  connection: LessonConnection
}

type LessonGroupBy {
  _id: [LessonConnection_id]
  createdAt: [LessonConnectionCreatedAt]
  updatedAt: [LessonConnectionUpdatedAt]
  title: [LessonConnectionTitle]
  slug: [LessonConnectionSlug]
  description: [LessonConnectionDescription]
  videoUrl: [LessonConnectionVideoUrl]
  course: [LessonConnectionCourse]
}

input LessonInput {
  title: String!
  slug: String!
  description: String!
  videoUrl: String
  course: ID
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Course | createCoursePayload | updateCoursePayload | deleteCoursePayload | CourseConnection | CourseAggregator | CourseGroupBy | CourseConnection_id | CourseConnectionCreatedAt | CourseConnectionUpdatedAt | CourseConnectionTitle | CourseConnectionDescription | CourseConnectionCover | CourseConnectionSlug | Instructor | createInstructorPayload | updateInstructorPayload | deleteInstructorPayload | InstructorConnection | InstructorAggregator | InstructorGroupBy | InstructorConnection_id | InstructorConnectionCreatedAt | InstructorConnectionUpdatedAt | InstructorConnectionName | InstructorConnectionBio | InstructorConnectionEmail | InstructorConnectionWebsite | Lesson | createLessonPayload | updateLessonPayload | deleteLessonPayload | LessonConnection | LessonAggregator | LessonGroupBy | LessonConnection_id | LessonConnectionCreatedAt | LessonConnectionUpdatedAt | LessonConnectionTitle | LessonConnectionSlug | LessonConnectionDescription | LessonConnectionVideoUrl | LessonConnectionCourse | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createCourse(input: createCourseInput): createCoursePayload
  updateCourse(input: updateCourseInput): updateCoursePayload
  deleteCourse(input: deleteCourseInput): deleteCoursePayload
  createInstructor(input: createInstructorInput): createInstructorPayload
  updateInstructor(input: updateInstructorInput): updateInstructorPayload
  deleteInstructor(input: deleteInstructorInput): deleteInstructorPayload
  createLesson(input: createLessonInput): createLessonPayload
  updateLesson(input: updateLessonInput): updateLessonPayload
  deleteLesson(input: deleteLessonInput): deleteLessonPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  course(id: ID!): Course
  courses(sort: String, limit: Int, start: Int, where: JSON): [Course]
  coursesConnection(sort: String, limit: Int, start: Int, where: JSON): CourseConnection
  instructor(id: ID!): Instructor
  instructors(sort: String, limit: Int, start: Int, where: JSON): [Instructor]
  instructorsConnection(sort: String, limit: Int, start: Int, where: JSON): InstructorConnection
  lesson(id: ID!): Lesson
  lessons(sort: String, limit: Int, start: Int, where: JSON): [Lesson]
  lessonsConnection(sort: String, limit: Int, start: Int, where: JSON): LessonConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateCourseInput {
  where: InputID
  data: CourseInput
}

type updateCoursePayload {
  course: Course
}

input updateInstructorInput {
  where: InputID
  data: InstructorInput
}

type updateInstructorPayload {
  instructor: Instructor
}

input updateLessonInput {
  where: InputID
  data: LessonInput
}

type updateLessonPayload {
  lesson: Lesson
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
